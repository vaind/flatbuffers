// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

library my_game.other_name_space;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import 'include_test1_my_game.other_name_space_generated.dart';

class FromInclude {
  final int value;
  const FromInclude._(this.value);

  factory FromInclude.fromValue(int value) {
    if (value == null) value = 0;
    if (!values.containsKey(value)) {
      throw new StateError('Invalid value $value for bit flag enum FromInclude');
    }
    return values[value];
  }

  static const int minValue = 0;
  static const int maxValue = 0;
  static bool containsValue(int value) => values.containsKey(value);

  static const FromInclude IncludeVal = const FromInclude._(0);
  static const Map<int,FromInclude> values = {0: IncludeVal,};

  static const fb.Reader<FromInclude> reader = const _FromIncludeReader();

  @override
  String toString() {
    return 'FromInclude{value: $value}';
  }
}

class _FromIncludeReader extends fb.Reader<FromInclude> {
  const _FromIncludeReader();

  @override
  int get size => 1;

  @override
  FromInclude read(fb.BufferContext bc, int offset) =>
      new FromInclude.fromValue(const fb.Int64Reader().read(bc, offset));
}

class Unused {
  Unused._(this._bc, this._bcOffset);

  static const fb.Reader<Unused> reader = const _UnusedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get a => const fb.Int32Reader().read(_bc, _bcOffset + 0);

  @override
  String toString() {
    return 'Unused{a: $a}';
  }
}

class _UnusedReader extends fb.StructReader<Unused> {
  const _UnusedReader();

  @override
  int get size => 4;

  @override
  Unused createObject(fb.BufferContext bc, int offset) => 
    new Unused._(bc, offset);
}

class UnusedBuilder {
  UnusedBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  int finish(int a) {
    fbBuilder.putInt32(a);
    return fbBuilder.offset;
  }

}

class UnusedObjectBuilder extends fb.ObjectBuilder {
  final int _a;

  UnusedObjectBuilder({
    int a,
  })
      : _a = a;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);

    fbBuilder.putInt32(_a);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
class TableB {
  TableB._(this._bc, this._bcOffset);
  factory TableB(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TableB> reader = const _TableBReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  TableA get a => TableA.reader.vTableGet(_bc, _bcOffset, 4, null);

  @override
  String toString() {
    return 'TableB{a: $a}';
  }
}

class _TableBReader extends fb.TableReader<TableB> {
  const _TableBReader();

  @override
  TableB createObject(fb.BufferContext bc, int offset) => 
    new TableB._(bc, offset);
}

class TableBBuilder {
  TableBBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addAOffset(int offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TableBObjectBuilder extends fb.ObjectBuilder {
  final TableAObjectBuilder _a;

  TableBObjectBuilder({
    TableAObjectBuilder a,
  })
      : _a = a;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(
    fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int aOffset = _a?.getOrCreateOffset(fbBuilder);

    fbBuilder.startTable();
    if (aOffset != null) {
      fbBuilder.addOffset(0, aOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
